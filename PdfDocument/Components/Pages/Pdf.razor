@page "/scantopdf"
@using Microsoft.Maui.Media
@inject IJSRuntime JS

<h3>📸 Multi-Photo PDF Scanner</h3>

@if (imagePaths.Count > 0)
{
    <div>
        <p><strong>@imagePaths.Count</strong> photo(s) captured</p>
        <button class="btn btn-primary mb-2" @onclick="GeneratePdf" disabled="@(!imagePaths.Any())">📄 Generate PDF</button>
    </div>
}

<button class="btn btn-success mb-3" @onclick="TakePhoto">📷 Take Photo</button>

<ul class="list-unstyled d-flex flex-wrap gap-2">
    @foreach (var path in imagePaths)
    {
        <li>
            <img src="@GetBase64Image(path)" style="max-width: 100px; height: auto; border: 1px solid #ccc;" />
        </li>
    }
</ul>

@code {
    private List<string> imagePaths = new();
    protected override async Task OnInitializedAsync()
    {
        TakePhoto();
    }
    private async Task TakePhoto()
    {
        try
        {
            var photo = await MediaPicker.Default.CapturePhotoAsync(new MediaPickerOptions
                {
                    Title = $"Scan_{DateTime.Now:yyyyMMdd_HHmmss}.jpg"
                });

            if (photo != null)
            {
                var localPath = Path.Combine(FileSystem.AppDataDirectory, photo.FileName);
                using var stream = await photo.OpenReadAsync();
                using var fileStream = File.OpenWrite(localPath);
                await stream.CopyToAsync(fileStream);

                imagePaths.Add(localPath);
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Camera error: {ex.Message}");
        }
    }

    private string GetBase64Image(string path)
    {
        if (!File.Exists(path)) return string.Empty;

        try
        {
            byte[] imageBytes = File.ReadAllBytes(path);
            string base64 = Convert.ToBase64String(imageBytes);

            string mime = Path.GetExtension(path).ToLower() switch
            {
                ".jpg" or ".jpeg" => "image/jpeg",
                ".png" => "image/png",
                _ => "image/*"
            };

            return $"data:{mime};base64,{base64}";
        }
        catch
        {
            return string.Empty;
        }
    }

    private async Task GeneratePdf()
    {
        if (imagePaths.Count == 0)
        {
            await JS.InvokeVoidAsync("alert", "No images to generate PDF.");
            return;
        }

        using var pdf = new PdfSharpCore.Pdf.PdfDocument();

        foreach (var path in imagePaths)
        {
            var page = pdf.AddPage();

            using var imageStream = File.OpenRead(path);
            using var image = PdfSharpCore.Drawing.XImage.FromStream(() => imageStream);

            page.Width = image.PixelWidth;
            page.Height = image.PixelHeight;

            using var gfx = PdfSharpCore.Drawing.XGraphics.FromPdfPage(page);
            gfx.DrawImage(image, 0, 0, image.PixelWidth, image.PixelHeight);
        }

        string pdfPath = Path.Combine(FileSystem.AppDataDirectory, $"Scan_{DateTime.Now:yyyyMMdd_HHmmss}.pdf");
        using var fs = new FileStream(pdfPath, FileMode.Create);
        pdf.Save(fs);

        await JS.InvokeVoidAsync("alert", $"PDF saved to: {pdfPath}");

        await Share.RequestAsync(new ShareFileRequest
            {
                Title = "Share Scanned PDF",
                File = new ShareFile(pdfPath)
            });

        imagePaths.Clear();
    }
}
